import os
import openai
import asyncio
import aiohttp
import ffmpeg
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command

# –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = "7899586060:AAHtuIWtfCYqP5tNB4KZUVh_A43bWwBhK60"
OPENAI_API_KEY = "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"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å ChatGPT. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ —Ñ–æ—Ä–º–∞–ª–∏–∑—É—é!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def convert_voice(voice: types.Voice):
    file = await bot.get_file(voice.file_id)
    file_path = file.file_path

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            if resp.status == 200:
                with open("voice.ogg", "wb") as f:
                    f.write(await resp.read())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 (Whisper API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç mp3, wav, m4a)
    input_file = "voice.ogg"
    output_file = "voice.mp3"
    ffmpeg.input(input_file).output(output_file, format="mp3").run(overwrite_output=True)

    return output_file

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(types.Voice)
async def voice_message_handler(message: Message):
    await message.answer("–†–∞—Å–ø–æ–∑–Ω–∞—é –∏ —Ñ–æ—Ä–º–∞–ª–∏–∑—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
    audio_file = await convert_voice(message.voice)
    with open(audio_file, "rb") as f:
        response = openai.Audio.transcribe(
            model="whisper-1",
            file=f,
            api_key=OPENAI_API_KEY
        )
        text = response["text"]

    # –§–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT
    formatted_prompt = f"""
    –¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
    
    1. –í—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—ã–µ –∏–¥–µ–∏.
    2. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ.
    3. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
    
    –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}
    """

    chat_response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": formatted_prompt}],
        api_key=OPENAI_API_KEY
    )
    formatted_answer = chat_response["choices"][0]["message"]["content"]

    await message.answer(f"üìå **–§–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{formatted_answer}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def chat_with_gpt(message: Message):
    formatted_prompt = f"""
    –¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
    
    1. –í—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—ã–µ –∏–¥–µ–∏.
    2. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ.
    3. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
    
    –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {message.text}
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": formatted_prompt}],
        api_key=OPENAI_API_KEY
    )
    formatted_answer = response["choices"][0]["message"]["content"]

    await message.answer(f"üìå **–§–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{formatted_answer}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
