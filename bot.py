import os
import aiohttp
import ffmpeg
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import openai
from pydantic import BaseModel

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("7899586060:AAHtuIWtfCYqP5tNB4KZUVh_A43bWwBhK60")
OPENAI_API_KEY = os.getenv("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")

# üîπ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# ‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT
class ChatGPTRequest(BaseModel):
    model: str = "gpt-4"
    messages: list

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ Webhook –∏ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(types.Voice)
async def voice_message_handler(message: Message):
    await message.answer("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    # üîπ –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
    file = await bot.get_file(message.voice.file_id)
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file.file_path}"

    # üîπ –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            if resp.status == 200:
                with open("voice.ogg", "wb") as f:
                    f.write(await resp.read())

    # üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
    input_file = "voice.ogg"
    output_file = "voice.mp3"
    ffmpeg.input(input_file).output(output_file, format="mp3").run(overwrite_output=True)

    # üîπ –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Whisper API
    with open(output_file, "rb") as f:
        response = openai.Audio.transcribe(
            model="whisper-1",
            file=f,
            api_key=OPENAI_API_KEY
        )
        text = response["text"]

    await message.answer(f"üìå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ ChatGPT
    chat_request = ChatGPTRequest(messages=[{"role": "user", "content": text}])
    chat_response = openai.ChatCompletion.create(
        model=chat_request.model,
        messages=chat_request.messages,
        api_key=OPENAI_API_KEY
    )
    answer = chat_response["choices"][0]["message"]["content"]

    await message.answer(answer)

# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
async def on_startup(bot: Bot):
    webhook_url = "https://chatbot-btc4.onrender.com/webhook"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Render URL
    await bot.set_webhook(webhook_url)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

# ‚úÖ –ó–∞–ø—É—Å–∫ Aiohttp Web Server –¥–ª—è Webhook
app = web.Application()
webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
webhook_handler.register(app, path="/webhook")
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=8000)
